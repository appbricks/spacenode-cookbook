#!/bin/bash

function terraform::set_cloud_region() {

  local node_type=$1
  local cloud=$2
  local region=$3

  case $cloud in
    aws)
      cloud::set_aws_credentials
      regions=$(aws ec2 describe-regions --query "Regions[].{Name:RegionName}" --output text)
      common::validate_value_from_list \
        "$regions" "$region" \
        "Unknown AWS region \"$region\"."

      export AWS_DEFAULT_REGION=$region
      ;;
    azure)
      cloud::set_azure_credentials
      regions=$(az account list-locations -o table | awk '$4 != "Name" && $0 !~ /^-.*/ { print substr($0, 48) }')
      common::validate_value_from_list \
        "$regions" "$region" \
        "Unknown Azure Cloud region \"$region\"."
      ;;
    google)
      cloud::set_google_credentials >/dev/null
      regions=$(gcloud compute regions list | awk '$1 != "NAME" { print $1 }')
      common::validate_value_from_list \
        "$regions" "$region" \
        "Unknown Google Cloud Platform region \"$region\"."
      ;;
  esac

  export TF_VAR_region=$region
}

function terraform::init() {

  local node_type=$1
  local cloud=$2
  local region=$3
  local template_dir=$4

  bucket_name=${TF_VAR_name}-vs-tfstate-${region}

  case $cloud in
    aws)
      # Check/Create Terraform state bucket
      set +e
      aws s3 ls | grep "${bucket_name}" >/dev/null 2>&1
      if [[ $? -ne 0 ]]; then
        set -e
        echo -e "${GREEN}\nCreating AWS S3 state bucket \"${bucket_name}\" to save terraform deployment state...${NC}"
        aws s3 mb s3://${bucket_name} --region $region
      else
        set -e
      fi

      # Initialize Terraform
      echo -e "${GREEN}Initializing terraform context...${NC}"
      terraform -chdir=$template_dir init \
        -backend-config="key=${node_type}" \
        -backend-config="bucket=${bucket_name}"        
      echo
      ;;

    azure)
      set +e
      az group list \
        | jq -r '.[].name' | grep default >/dev/null 2>&1
      if [[ $? -ne 0 ]]; then
        set -e
        echo -e "${GREEN}\nCreating Azure resource group \"default\" in region \"$region\"...${NC}"
        az group create \
          --name default \
          --location "${region}" \
          --output none
      else
        set -e
      fi
      storage_account=vsstate${region}

      set +e
      az storage account list \
        | jq -r '.[].name' | grep "${storage_account}" >/dev/null 2>&1
      if [[ $? -ne 0 ]]; then
        set -e
        echo -e "${GREEN}\nCreating Azure Storage account \"${storage_account}\" to save terraform deployment state in...${NC}"
        az storage account create \
          --name "${storage_account}" \
          --location "${region}" \
          --resource-group default \
          --sku Standard_LRS \
          --output none
      else
        set -e
      fi

      set +e
      container_name="${TF_VAR_name}"
      az storage container list --account-name "${storage_account}" \
        | jq -r '.[].name' | grep "${container_name}" >/dev/null 2>&1
      if [[ $? -ne 0 ]]; then
        set -e
        echo -e "${GREEN}\nCreating Azure container \"${container_name}\" in storage account \"${storage_account}\" to save terraform deployment state in...${NC}"
        az storage container create \
          --name "${container_name}" \
          --account-name "${storage_account}" \
          --output none
      else
        set -e
      fi

      # Initialize Terraform
      echo -e "${GREEN}Initializing terraform context...${NC}"
      terraform -chdir=$template_dir init \
        -backend-config="resource_group_name=default" \
        -backend-config="container_name=${container_name}" \
        -backend-config="key=terraform.tfstate" \
        -backend-config="storage_account_name=${storage_account}"
      echo
      ;;
      
    google)
      # Check/Create Terraform state bucket
      set +e
      gsutil ls | awk -F'/' '{ print $3 }' | grep "${bucket_name}" >/dev/null 2>&1
      if [[ $? -ne 0 ]]; then
        set -e
        echo -e "${GREEN}\nCreating Google Storage state bucket \"${bucket_name}\" to save terraform deployment state...${NC}"
        gsutil mb -l $region gs://${bucket_name}
      else
        set -e
      fi

      # Initialize Terraform
      echo -e "${GREEN}Initializing terraform context...${NC}"
      terraform -chdir=$template_dir init \
        -backend-config="prefix=${node_type}" \
        -backend-config="bucket=${bucket_name}"
      echo
      ;;
  esac
}

function terraform::apply() {

  local node_type=$1
  local cloud=$2
  local region=$3
  local template_dir=$4
  local start=`date +%s`

  echo -e "${GREEN}Deploying node type \"${node_type}\" to region \"${region}\" of \"$cloud\" cloud...${NC}"

  # Apply Terraform template and filter out
  # any output values for security purposes.
  terraform -chdir=$template_dir apply -auto-approve 2>&1 \
    | tee apply.log | awk '/Outputs:/ {l=999}; (l-- > 0) {next} 1'

  # Save Terraform output in a JSON file for
  # later reference.
  local working_dir=$(pwd)
  pushd $template_dir 2>&1 > /dev/null
  terraform output -json \
     -state=.terraform/terraform.tfstate > ${working_dir}/output.json
  popd 2>&1 > /dev/null

  local end=`date +%s`
  local time=$((end-start))
  local minutes=$((time/60))
  local seconds=$((time%60))

  o=$(cat output.json)
  instance_name=$(echo "$o" | jq -r '.cb_managed_instances.value[0] | .name')
  echo "$o" | jq -r '.cb_managed_instances.value[0] | .ssh_key' > ${instance_name}-ssh-key.pem
  chmod 0600 ${instance_name}-ssh-key.pem

  default_ssh_key=$(echo "$o" | jq -r '.cb_default_openssh_private_key.value')
  if [[ -n "$default_ssh_key" && "$default_ssh_key" != "null" ]]; then
    echo "$default_ssh_key" > default-ssh-key.pem
    chmod 0600 default-ssh-key.pem
  fi

  echo -e "${GREEN}Deploy operation completed in ${minutes}m and ${seconds}s."
}

function terraform::taint_bastion() {

  local node_type=$1
  local cloud=$2
  local region=$3
  local template_dir=$4

  echo -e "${GREEN}Flagging node type \"${node_type}\" in region \"${region}\" of \"$cloud\" cloud to be rebuilt...${NC}"

  case $cloud in
    aws)
      terraform taint module.bootstrap.aws_instance.bastion
      ;;
    azure)
      terraform taint module.bootstrap.azurerm_virtual_machine.bastion
      ;;
    google)
      terraform taint module.bootstrap.google_compute_instance.bastion
      ;;
  esac
}

function terraform::plan() {

  local node_type=$1
  local cloud=$2
  local region=$3
  local template_dir=$4

  echo -e "${GREEN}Showing deployment plan for node type \"${node_type}\" in region \"${region}\" of \"$cloud\" cloud...${NC}"

  # Output Terraform plan
  terraform -chdir=$template_dir plan
}

function terraform::destroy() {

  local node_type=$1
  local cloud=$2
  local region=$3
  local template_dir=$4

  echo -e "${GREEN}Destroying node type \"${node_type}\" deployed to region \"${region}\" of \"$cloud\" cloud...${NC}"

  # Apply Terraform template and filter out
  # any output values for security purposes.
  terraform -chdir=$template_dir destroy -auto-approve \
    -state=.terraform/terraform.tfstate 2>&1 | tee apply.log

  rm -fr output.json
}
