#!/bin/bash

workspace_root=$1 && shift
template_dir=$1 && shift
node_type=${1:-<NODE_TYPE>} && shift
cloud=${1:-<CLOUD>} && shift

source $(dirname $BASH_SOURCE)/common
set -euo pipefail

region=""

common::validate_workspace reinit_node
while [[ $# -gt 0 ]]; do
  case "$1" in
    -r|--region)
      region=$2
      shift
      ;;
    -d|--debug)
      set -x
      ;;
    -h|--help)
      usage::reinit_node
      exit 0
      ;;
    *)
      echo -e "${RED}\nERROR! Unknown option \"$1\".${NC}"
      usage::reinit_node
      exit 1
      ;;
  esac
  shift
done

if [[ $cloud =~ $clouds_with_regions ]]; then
  if [[ -z $region ]]; then
    usage::deploy_node
    echo -e "${RED}\nERROR! Please provide a cloud region from the following list.${NC}"
    $(dirname $BASH_SOURCE)/show-regions $cloud
    exit 1
  fi

  run_dir=${workspace_dir}/${region}
else
  run_dir=${workspace_dir}
fi
if [[ ! -e ${run_dir} ]]; then
  echo -e "${RED}\nERROR! Deployment workspace path does not exist. The"
  echo -e "       server may not have been deployed.${NC}"
  exit 1
fi

# This is usually set at deploy but required in
# order to reinitialize without prompting for input.
export TF_VAR_cb_local_state_path=${run_dir}/state
export TF_VAR_vpn_idle_action=""

if [[ -e ${run_dir} ]]; then
  pushd ${run_dir} >/dev/null 2>&1
  terraform::set_cloud_region "$node_type" "$cloud" "$region"
  terraform::init "$node_type" "$cloud" "$region" "$template_dir"
  popd >/dev/null 2>&1
else
  echo -e "${RED}\nERROR! Deployment workspace path does not exist. The region"
  echo -e "       provided may be invalid or the server may not have been deployed.${NC}"
fi
