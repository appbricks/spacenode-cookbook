#!/bin/bash

scripts_dir=$(dirname $BASH_SOURCE)
root_dir=$(cd $scripts_dir/../.. && pwd)

source ${scripts_dir}/common
set -euo pipefail

workspace_root=$1 && shift
template_dir=$1 && shift

if [[ $# -gt 0 ]]; then
  usage::main
  echo -e "${RED}\nERROR! \"show-nodes\" command does accept any additional arguments.${NC}"
  exit 1
fi

echo -e "\n${GREEN}${BOLD}Nodes deployed to the cloud${NORMAL}"
echo -e "===========================${NC}\n"

vpn_nodes=( $(cloud::nodes $workspace_root) )
if [[ ${#vpn_nodes[@]} -eq 0 ]]; then
  echo -e "${GREEN}No nodes have been deployed.${NC}"
  exit 0
fi
ui::print_nodes_table "${vpn_nodes[@]}"

re='^[0-9]+$'

printf "\n${GREEN}Select node to perform an action on or (q)uit: ${NC}" && read option
[[ -n $option && $option != q && $option != Q ]] || exit 0

if [[ ! $option =~ $re \
  || $option -lt 0 \
  || $option -gt $((${#vpn_nodes[@]}-1)) ]]; then

  echo -e "${RED}\nERROR! Invalid node selected.${NC}"
  exit 1
fi

node_detail=${vpn_nodes[$option]}
node_type=$(echo "$node_detail" | awk -F '|' '{ print $1 }')
cloud=$(echo "$node_detail" | awk -F '|' '{ print $2 }')
region=$(echo "$node_detail" | awk -F '|' '{ print $3 }')
node_name=$(echo "$node_detail" | awk -F '|' '{ print $4 }')
node_status=$(echo "$node_detail" | awk -F '|' '{ print $5 }')
root_user=$(echo "$node_detail" | awk -F '|' '{ print $7 }')
root_passwd=$(echo "$node_detail" | awk -F '|' '{ print $8 }')
node_id=$(echo "$node_detail" | awk -F '|' '{ print $9 }')

[[ -z $root_user ]] ||
  echo -e "\n${CYAN}Node Admin =>\n  User: ${root_user}\n  Password: ${root_passwd}${NC}"

echo -e "\n${GREEN}${BOLD}What do you want to do:${NORMAL}"
echo -e "1) Update Node"
if [[ $node_status == running ]]; then
  echo -e "2) Download VPN Config"
  echo -e "3) SSH to Node"
  echo -e "4) Stop Node"
elif [[ $node_status == stopped ]]; then
  echo -e "${DIM}${DARK_GRAY}2) Download VPN Config${GREEN}${NORMAL}"
  echo -e "${DIM}${DARK_GRAY}3) SSH to Node${GREEN}${NORMAL}"
  echo -e "4) Start Node"
else
  echo -e "${DIM}${DARK_GRAY}2) Download VPN Config${GREEN}${NORMAL}"
  echo -e "${DIM}${DARK_GRAY}3) Stop Node${GREEN}${NORMAL}"
fi
echo -e "5) Delete Node"

printf "\nSelect action or (q)uit: ${NC}" && read option
[[ -n $option && $option != q && $option != Q ]] || exit 0
if [[ ! $option =~ $re || $option -lt 1 || $option -gt 5 ]]; then
  echo -e "${RED}\nERROR! Invalid action selected.${NC}"
  exit 1
fi

case $option in
  1)
    echo
    $scripts_dir/deploy-node \
      $workspace_root $template_dir \
      $node_type $cloud -r $region -u
    ;;
  2)
    if [[ $node_status == running ]]; then
      echo -e -n "\n${GREEN}Please enter the VPN username: ${NC}" && read username
      echo -e -n "${GREEN}Please enter the VPN password: ${NC}" && read -s password

      echo
      $scripts_dir/download-vpn-config \
        $workspace_root $template_dir \
        $node_type $cloud -r $region \
        -u $username -p $password
    fi
    ;;
  3)
    if [[ $node_status == running ]]; then
      echo
      /usr/bin/ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no \
        -i .workspace/${node_type}/${cloud}/${region}/bastion-ssh-key.pem \
        mycs-admin@${node_name}
    fi
    ;;
  4)
    case $node_status in
      running)
        echo -e "\n${GREEN}Stopping \"${node_name}\"...${NC}"
        response=$(cloud::stop_node "$cloud" "$region" "$node_id")
        ;;
      stopped)
        echo -e "\n${GREEN}Starting \"${node_name}\"...${NC}"
        response=$(cloud::start_node "$cloud" "$region" "$node_id")
        ;;
    esac
    ;;
  5)
    echo
    $scripts_dir/destroy-node \
      $workspace_root $template_dir \
      $node_type $cloud -r $region
    ;;
esac
