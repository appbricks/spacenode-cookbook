#!/bin/bash

workspace_root=$1 && shift
template_dir=$1 && shift
node_type=${1:-<NODE_TYPE>} && shift
cloud=${1:-<CLOUD>} && shift

skip_ssl_validation=""
if [[ -z $TF_VAR_certify_bastion || $TF_VAR_certify_bastion == false ]]; then
  skip_ssl_validation="-k"
fi

source $(dirname $BASH_SOURCE)/common
set -euo pipefail

function download_vpn_config() {

  local user=$1
  local password=$2
  local config_file_url=$3
  local config_file_out=$4

  rm -fr $config_file_out

  set +e
  curl -s -f $skip_ssl_validation \
    -u "${user}:${password}" $config_file_url \
    -o $config_file_out
  
  while [[ $? -ne 0 ]]; do
    echo "Waiting for VPN node to become available..."
    sleep 5

    curl -s -f $skip_ssl_validation \
      -u "${user}:${password}" $config_file_url \
      -o $config_file_out
  done
  set -e
}

region=""
user=""
password=""

common::validate_workspace download_vpn_config
while [[ $# -gt 0 ]]; do
  case "$1" in
    -r|--region)
      region=$2
      shift
      ;;
    -u|--user)
      user=$2
      shift
      ;;
    -p|--password)
      password=$2
      shift
      ;;
    -d|--debug)
      set -x
      ;;
    -h|--help)
      usage::download_vpn_config
      exit 0
      ;;
    *)
      echo -e "${RED}\nERROR! Unknown option \"$1\".${NC}"
      usage::download_vpn_config
      exit 1
      ;;
  esac
  shift
done

if [[ $cloud =~ $clouds_with_regions ]]; then
  if [[ -z $region ]]; then
    usage::deploy_node
    echo -e "${RED}\nERROR! Please provide a cloud region from the following list.${NC}"
    $(dirname $BASH_SOURCE)/show-regions $cloud
    exit 1
  fi

  run_dir=${workspace_dir}/${region}
else
  run_dir=${workspace_dir}
fi
if [[ ! -e ${run_dir} ]]; then
  echo -e "${RED}\nERROR! Deployment workspace path does not exist. The"
  echo -e "       server may not have been deployed.${NC}"
  exit 1
fi

if [[ -z "$user" || -z "$password" ]]; then
  usage::download_vpn_config
  echo -e "${RED}\nERROR! The user name and password of the VPN user whose"
  echo -e "       configuration should be download cannot be empty.${NC}"
  exit 1
fi

output=$(cat ${run_dir}/output.json)

vpn_type=$(echo "$output" | jq -r .cb_vpn_type.value)
if [[ -z $vpn_type ]]; then
  echo -e "${RED}\nERROR! Node does not provide a VPN service.${NC}"
  exit 1
fi
if [[ $vpn_type == wireguard ]]; then
  echo -e "${YELLOW}\nThe Space node is configured with a wireguard VPN which"
  echo -e "can be configured only via the MyCS node service API.${NC}"
  exit
fi

node_name=$(echo "$output" | jq -r .cb_vpc_name.value)
vpn_masking_available=$(echo "$output" | jq -r .cb_vpn_masking_available.value)
bastion_fqdn=$(echo "$output" | jq -r '.cb_managed_instances.value[0] | .fqdn')
bastion_port=$(echo "$output" | jq -r '.cb_managed_instances.value[0] | .api_port')
dns_configured=$(echo "$output" | jq -r .cb_dns_configured.value)
if [[ $dns_configured == true ]]; then
  vpn_server_host=$bastion_fqdn
else
  vpn_server_host=$(echo "$output" | jq -r '.cb_managed_instances.value[0] | .public_ip')
fi
if [[ -n $bastion_port && $bastion_port != 443 ]]; then
  vpn_server_host="${vpn_server_host}:${bastion_port}"
fi
echo -e "${GREEN}\nDownloading VPN configs from \"https://${vpn_server_host}/static/~${user}/\"...${NC}"

if [[ $vpn_masking_available == yes ]]; then
  # Download tunnel script
  download_vpn_config $user $password \
    https://${vpn_server_host}/static/~${user}/client_tunnel \
    ${run_dir}/client_tunnel

  chmod +x ${run_dir}/client_tunnel
fi

working_dir=$(cd $workspace_dir/../../../../ && pwd)/configs/${node_name}
mkdir -p $working_dir

os_type="$(uname -s)"

if [[ $os_type == Darwin ]]; then

  case $vpn_type in
    openvpn)
      file=${TF_VAR_name}.ovpn
      ;;
    ipsec)
      file=${TF_VAR_name}.mobileconfig
      ;;
    *)
      echo -e "${RED}\nERROR! Unknown VPN type '$vpn_type'.${NC}"
      exit 1
  esac

  download_vpn_config $user $password \
    https://${vpn_server_host}/static/~${user}/${file} \
    ${working_dir}/${file}

  open ${working_dir}/${file}

elif [[ $os_type == Linux ]]; then

  case $vpn_type in

    openvpn)
      file=openvpn-config.tunnelblick.zip
      download_vpn_config $user $password \
        https://${vpn_server_host}/static/~${user}/${file} \
        ${working_dir}/${file}

      rm -fr ${working_dir}/*.tblk
      unzip -q -o ${working_dir}/${file} -d $working_dir
      rm ${working_dir}/${file}
      
      file=${TF_VAR_name}.ovpn
      download_vpn_config $user $password \
        https://${vpn_server_host}/static/~${user}/${file} \
        ${working_dir}/${file}       
      ;;

    ipsec)      
      file=${TF_VAR_name}.mobileconfig
      download_vpn_config $user $password \
        https://${vpn_server_host}/static/~${user}/${file} \
        ${working_dir}/${file}    

      file=${user}.p12
      download_vpn_config $user $password \
        https://${vpn_server_host}/static/~${user}/${file} \
        ${working_dir}/${file} 
      ;;

    *)
      echo -e "${RED}\nERROR! Unknown VPN type '$vpn_type'.${NC}"
      exit 1
  esac

  echo -e "${GREEN}\nVPN client config files downloaded to folder \"configs/${node_name}/\":\n"
  first=y
  for d in $(find ${working_dir} -maxdepth 1 -print); do
    if [[ $first == n ]]; then
      echo "- \"$(basename $d)\""
    else
      first=n
    fi      
  done

  case $vpn_type in
    openvpn)
      echo -e "\nImport it to your OpenVPN or Tunnelblick client and login using the credentials"
      echo -e "below:\n${NC}"
      echo -e "  user: ${user}"
      echo -e "  password: ${password}\n"
      ;;
    ipsec)
      echo -e "\nImport the \"${file}\" profile if you are on an Apple device. For"
      echo -e "all other systems you will need to configure your native client using the"
      echo -e "provided PKCS key for the user.\n"
      ;;
  esac
else
    echo -e "${RED}\nERROR: Unable to determine OS type for which the VPN configurations should be"
    echo -e "       downloaded. Please download manually from:\n${NC}"
    echo -e "       url: https://${vpn_server_host}/static/~${user}"
    echo -e "       user: ${user}"
    echo -e "       password: ${password}\n"
    exit 1
fi
