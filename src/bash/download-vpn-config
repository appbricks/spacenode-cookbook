#!/bin/bash

workspace_dir=$1 && shift
template_dir=$1 && shift
vpn_type=${1:-<VPN_TYPE>} && shift
cloud=${1:-<CLOUD>} && shift

source $(dirname $BASH_SOURCE)/common
set -euo pipefail

function download_vpn_config() {

  local user=$1
  local password=$2
  local config_file_url=$3
  local config_file_out=$4

  rm -fr $config_file_out

  skip_ssl_validation=""
  if [[ $TF_VAR_certify_bastion == false ]]; then
    skip_ssl_validation="-k"
  fi

  set +e
  curl -s -f $skip_ssl_validation \
    -u "${user}:${password}" $config_file_url \
    -o $config_file_out
  
  while [[ $? -ne 0 ]]; do
    echo "Waiting for VPN node to become available..."
    sleep 5

    curl -s -f $skip_ssl_validation \
      -u "${user}:${password}" $config_file_url \
      -o $config_file_out
  done
  set -e
}

region=""
user=""
password=""

common::validate_workspace download_vpn_config
while [[ $# -gt 0 ]]; do
  case "$1" in
    -r|--region)
      region=$2
      shift
      ;;
    -u|--user)
      user=$2
      shift
      ;;
    -p|--password)
      password=$2
      shift
      ;;
    -d|--debug)
      set -x
      ;;
    -h|--help)
      usage::download_vpn_config
      exit 0
      ;;
    *)
      echo -e "${RED}\nERROR! Unknown option \"$1\".${NC}"
      usage::download_vpn_config
      exit 1
      ;;
  esac
  shift
done

if [[ -z $region ]]; then
  usage::download_vpn_config
  echo -e "${RED}\nERROR! A region must be specified to identify the"
  echo -e "       VPN server to retrieve the configuration from.${NC}"
  exit 1
fi
if [[ -z "$user" || -z "$password" ]]; then
  usage::download_vpn_config
  echo -e "${RED}\nERROR! The user name and password of the VPN user whose"
  echo -e "       configuration should be download cannot be empty.${NC}"
  exit 1
fi
if [[ ! -e ${workspace_dir}/${region} ]]; then
  echo -e "${RED}\nERROR! Deployment workspace path does not exist. The region"
  echo -e "       provided may be invalid or the server may not have been deployed.${NC}"
  exit 1
fi

bastion_fqdn=$(cat ${workspace_dir}/${region}/output.json | jq -r .bastion_fqdn.value)
dns_configured=$(cat ${workspace_dir}/${region}/output.json | jq -r .dns_configured.value)
if [[ $dns_configured == true ]]; then
  vpn_server_host=$bastion_fqdn
else
  vpn_server_host=$(cat ${workspace_dir}/${region}/output.json | jq -r .bastion_public_ip.value)
fi
echo -e "${GREEN}Downloading VPN configs from \"https://${vpn_server_host}/~${user}/\"...${NC}"

if [[ $vpn_type == ovpn-x ]]; then
  # Download tunnel script
  download_vpn_config $user $password \
    https://${vpn_server_host}/~${user}/client_tunnel \
    ${workspace_dir}/${region}/client_tunnel

  chmod +x ${workspace_dir}/${region}/client_tunnel
fi

working_dir=$(cd $workspace_dir/../../../ && pwd)/configs/${bastion_fqdn}
mkdir -p $working_dir

os_type="$(uname -s)"

if [[ $os_type == Darwin ]]; then

  case $vpn_type in
    ipsec)
      file=${TF_VAR_name}-${vpn_type}-${region}-vpn.mobileconfig
      ;;
    ovpn|ovpn-x)
      file=openvpn-config.tunnelblick.zip
      ;;
  esac

  download_vpn_config $user $password \
    https://${vpn_server_host}/~${user}/${file} \
    ${working_dir}/${file}

  case $vpn_type in
    ipsec)
      open ${working_dir}/${file}
      ;;
    ovpn|ovpn-x)
      rm -fr ${working_dir}/*.tblk
      unzip -q -o ${working_dir}/${file} -d $working_dir
      rm ${working_dir}/${file}

      tunnelblick_config=$(ls -l $working_dir | grep ".tblk" | awk '{ print $9 }')
      open ${working_dir}/${tunnelblick_config}
      ;;
  esac

elif [[ $os_type == Linux ]]; then

    if [[ $vpn_type == ipsec ]]; then

      file=${TF_VAR_name}-${vpn_type}-${region}-vpn.mobileconfig
      download_vpn_config $user $password \
        https://${vpn_server_host}/~${user}/${file} \
        ${working_dir}/${file}    

      file=${user}.p12
      download_vpn_config $user $password \
        https://${vpn_server_host}/~${user}/${file} \
        ${working_dir}/${file} 
    else

      file=openvpn-config.tunnelblick.zip
      download_vpn_config $user $password \
        https://${vpn_server_host}/~${user}/${file} \
        ${working_dir}/${file}

      rm -fr ${working_dir}/*.tblk
      unzip -q -o ${working_dir}/${file} -d $working_dir
      rm ${working_dir}/${file}
      
      file=${TF_VAR_name}-${vpn_type}-${region}-vpn.ovpn
      download_vpn_config $user $password \
        https://${vpn_server_host}/~${user}/${file} \
        ${working_dir}/${file}    
    fi

    echo -e "${GREEN}\nVPN client config files downloaded to folder \"configs/${bastion_fqdn}/\":\n"
    first=y
    for d in $(find ${working_dir} -maxdepth 1 -print); do
      if [[ $first == n ]]; then
        echo "- \"$(basename $d)\""
      else
        first=n
      fi      
    done

    if [[ $vpn_type == ovpn || $vpn_type == ovpn-x ]]; then
      echo -e "\nImport it to your OpenVPN or Tunnelblick client and login using the credentials"
      echo -e "below:\n${NC}"
      echo -e "  user: ${user}"
      echo -e "  password: ${password}\n"
    else
      echo -e "\nImport the \"*.mobileconfig\" profile if you are on an Apple device. For all"
      echo -e "other systems you will need to configure your native IPsec client using the"
      echo -e "provided PKCS key for the user."
    fi
else
    echo -e "${RED}\nERROR: Unable to determine OS type for which the VPN configurations should be"
    echo -e "       downloaded. Please download manually from:\n${NC}"
    echo -e "       url: https://${vpn_server_host}/~${user}"
    echo -e "       user: ${user}"
    echo -e "       password: ${password}\n"
    exit 1
fi
