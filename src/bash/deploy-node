#!/bin/bash

workspace_dir=$1 && shift
template_dir=$1 && shift
vpn_type=${1:-<VPN_TYPE>} && shift
cloud=${1:-<CLOUD>} && shift

source $(dirname $BASH_SOURCE)/common
set -euo pipefail

region=""
clean=no
init=no
upgrade=no
idle_shutdown=yes
plan=no

common::validate_workspace deploy_node
while [[ $# -gt 0 ]]; do
  case "$1" in
    -r|--region)
      region=$2
      shift
      ;;
    -c|--clean)
      clean=yes
      ;;
    -i|--init)
      init=yes
      ;;
    -u|--upgrade)
      upgrade=yes
      ;;
    -a|--no-idle-shutdown)
      idle_shutdown=no
      ;;
    -s|--show)
      plan=yes
      ;;
    -d|--debug)
      set -x
      ;;
    -h|--help)
      usage::deploy_node
      exit 0
      ;;
    *)
      echo -e "${RED}\nERROR! Unknown option \"$1\".${NC}"
      usage::deploy_node
      exit 1
      ;;
  esac
  shift
done

if [[ -z $region ]]; then
  usage::deploy_node
  echo -e "${RED}\nERROR! Please provide a cloud region from the following list.${NC}"
  $(dirname $BASH_SOURCE)/show-regions $cloud
  exit 1
fi

mkdir -p ${workspace_dir}/${region}
pushd ${workspace_dir}/${region} >/dev/null 2>&1

if [[ $idle_shutdown == yes ]]; then
  if [[ -e ${workspace_dir}/${region}/output.json ]]; then
    vpn_idle_action=$(cat ${workspace_dir}/${region}/output.json | jq -r .vpn_idle_action.value)
    export TF_VAR_vpn_idle_action="$vpn_idle_action"
  else
    export TF_VAR_vpn_idle_action="shutdown"
  fi
else
  export TF_VAR_vpn_idle_action=""
fi

terraform::set_cloud_region "$vpn_type" "$cloud" "$region"
if [[ $clean == yes || ! -e .terraform ]]; then
  # (Re)Initialize terraform context if
  # requested or if doing fresh deployment
  rm -fr .terraform
  terraform::init "$vpn_type" "$cloud" "$region" "$template_dir"
elif [[ $init == yes ]]; then
  terraform::init "$vpn_type" "$cloud" "$region" "$template_dir"
fi
if [[ $upgrade == yes ]]; then
  terraform::taint_bastion "$vpn_type" "$cloud" "$region" "$template_dir"
fi
if [[ $plan == yes ]]; then
  terraform::plan "$vpn_type" "$cloud" "$region" "$template_dir"
else
  terraform::apply "$vpn_type" "$cloud" "$region" "$template_dir"
fi

popd >/dev/null 2>&1