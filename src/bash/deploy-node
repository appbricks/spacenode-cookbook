#!/bin/bash

workspace_root=$1 && shift
template_dir=$1 && shift
node_type=${1:-<NODE_TYPE>} && shift
cloud=${1:-<CLOUD>} && shift

source $(dirname $BASH_SOURCE)/common
set -euo pipefail

region=""
input_node=""
clean=no
init=no
upgrade=no
idle_shutdown=yes
plan=no

common::validate_workspace deploy_node
while [[ $# -gt 0 ]]; do
  case "$1" in
    -r|--region)
      region=$2
      shift
      ;;
    -x|--in)
      input_node=$2
      shift
      ;;
    -c|--clean)
      clean=yes
      ;;
    -i|--init)
      init=yes
      ;;
    -u|--upgrade)
      upgrade=yes
      ;;
    -a|--no-idle-shutdown)
      idle_shutdown=no
      ;;
    -s|--show)
      plan=yes
      ;;
    -d|--debug)
      set -x
      ;;
    -h|--help)
      usage::deploy_node
      exit 0
      ;;
    *)
      echo -e "${RED}\nERROR! Unknown option \"$1\".${NC}"
      usage::deploy_node
      exit 1
      ;;
  esac
  shift
done

if [[ -z $region ]]; then
  usage::deploy_node
  echo -e "${RED}\nERROR! Please provide a cloud region from the following list.${NC}"
  $(dirname $BASH_SOURCE)/show-regions $cloud
  exit 1
fi

mkdir -p ${workspace_dir}/${region}
pushd ${workspace_dir}/${region} >/dev/null 2>&1

if [[ $idle_shutdown == yes ]]; then
  if [[ -e ${workspace_dir}/${region}/output.json ]]; then
    idle_action=$(cat ${workspace_dir}/${region}/output.json | jq -r .cb_idle_action.value)
    export TF_VAR_idle_action="$idle_action"
  else
    export TF_VAR_idle_action="shutdown"
  fi
else
  export TF_VAR_idle_action=""
fi

if [[ -n $input_node ]]; then  
  echo "# inputs from node '$input_node'" > ${workspace_dir}/${region}/input-vars.sh

  o=$(cat ${workspace_root}/${input_node}/${cloud}/${region}/output.json)
  for name in $(echo "$o" | jq -r 'keys[]'); do 
    echo "export TF_VAR_$name='$(echo $o | jq -r .${name}.value)'" >> ${workspace_dir}/${region}/input-vars.sh
  done
  source ${workspace_dir}/${region}/input-vars.sh
fi

terraform::set_cloud_region "$node_type" "$cloud" "$region"
if [[ $clean == yes ]]; then
  # (Re)Initialize terraform context if
  # requested or if doing fresh deployment
  rm -fr $(pwd)/.terraform*
  terraform::init "$node_type" "$cloud" "$region" "$template_dir"
elif [[ $init == yes || ! -e ${template_dir}/.terraform ]]; then
  terraform::init "$node_type" "$cloud" "$region" "$template_dir"
fi
if [[ $upgrade == yes ]]; then
  terraform::taint_bastion "$node_type" "$cloud" "$region" "$template_dir"
fi
if [[ $plan == yes ]]; then
  terraform::plan "$node_type" "$cloud" "$region" "$template_dir"
else
  terraform::apply "$node_type" "$cloud" "$region" "$template_dir"
fi

popd >/dev/null 2>&1