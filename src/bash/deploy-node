#!/bin/bash

workspace_root=$1 && shift
template_dir=$1 && shift
node_type=${1:-<NODE_TYPE>} && shift
cloud=${1:-<CLOUD>} && shift

source $(dirname $BASH_SOURCE)/common
set -euo pipefail

region=""
clean=no
init=no
upgrade=no
idle_shutdown=yes
plan=no
dev=no

common::validate_workspace deploy_node
while [[ $# -gt 0 ]]; do
  case "$1" in
    -r|--region)
      region=$2
      shift
      ;;
    -c|--clean)
      clean=yes
      ;;
    -i|--init)
      init=yes
      ;;
    -u|--upgrade)
      upgrade=yes
      ;;
    -a|--no-idle-shutdown)
      idle_shutdown=no
      ;;
    -s|--show)
      plan=yes
      ;;
    -d|--debug)
      set -x
      ;;
    --dev)
      dev=yes
      ;;
    -h|--help)
      usage::deploy_node
      exit 0
      ;;
    *)
      echo -e "${RED}\nERROR! Unknown option \"$1\".${NC}"
      usage::deploy_node
      exit 1
      ;;
  esac
  shift
done

if [[ $cloud =~ $clouds_with_regions ]]; then
  if [[ -z $region ]]; then
    usage::deploy_node
    echo -e "${RED}\nERROR! Please provide a cloud region from the following list.${NC}"
    $(dirname $BASH_SOURCE)/show-regions $cloud
    exit 1
  fi

  run_dir=${workspace_dir}/${region}
else
  run_dir=${workspace_dir}
fi

mkdir -p $run_dir
pushd $run_dir >/dev/null 2>&1

export TF_VAR_cb_local_state_path=${run_dir}/state

if [[ $idle_shutdown == yes ]]; then
  if [[ -e ${run_dir}/output.json ]]; then
    idle_action=$(cat ${run_dir}/output.json | jq -r .cb_idle_action.value)
    export TF_VAR_idle_action="$idle_action"
  else
    export TF_VAR_idle_action="shutdown"
  fi
else
  export TF_VAR_idle_action=""
fi

if [[ -n $input_node ]]; then
  echo "# inputs from node '$input_node'" > ${run_dir}/input-vars.sh

  [[ $dev == yes ]] && \
    echo -e "${GREEN}${BOLD}\nDeploying recipe with inputs from node '$input_node'...${NORMAL}${NC}\n"

  input_node_output_file=${workspace_root}/${input_node}/${input_node_cloud}/${region}/output.json
  if [[ -e $input_node_output_file ]]; then
    o=$(cat $input_node_output_file)
    for name in $(echo "$o" | jq -r 'keys[]'); do 
      val=$(echo $o | jq -r .${name}.value)
      echo "export TF_VAR_$name='${val}'" >> ${run_dir}/input-vars.sh
      [[ $dev == yes ]] && \
        echo -e "${LIGHT_GRAY}  ${BOLD}$name${NORMAL} = \"${val}\".${NORMAL}${NC}"
    done
    [[ $dev == yes ]] && echo
  fi
  
  # source all outputs from dependent node
  source ${run_dir}/input-vars.sh
fi

terraform::set_cloud_region "$node_type" "$cloud" "$region"
if [[ $clean == yes ]]; then
  # (Re)Initialize terraform context if
  # requested or if doing fresh deployment
  rm -fr $(pwd)/.terraform*
  terraform::init "$node_type" "$cloud" "$region" "$template_dir"
elif [[ $init == yes || ! -e $(pwd)/.terraform ]]; then
  terraform::init "$node_type" "$cloud" "$region" "$template_dir"
fi
if [[ $upgrade == yes ]]; then
  terraform::taint_bastion "$node_type" "$cloud" "$region" "$template_dir"
fi

# remove name input which is usually the 
# name for the space node and may clash 
# with an expected app name variable
[[ -z $input_node ]] || unset TF_VAR_name 

if [[ $plan == yes ]]; then
  terraform::plan "$node_type" "$cloud" "$region" "$template_dir"
else
  terraform::apply "$node_type" "$cloud" "$region" "$template_dir"
fi

popd >/dev/null 2>&1