#!/bin/bash

WHITE='\033[1;37m'
BLACK='\033[0;30m'
RED='\033[0;31m'
BLUE='\033[0;34m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
DARK_GRAY='\033[1;30m'
BROWN_ORANGE='\033[0;33m'
LIGHT_GRAY='\033[0;37m'
LIGHT_RED='\033[1;31m'
LIGHT_GREEN='\033[1;32m'
LIGHT_BLUE='\033[1;34m'
LIGHT_PURPLE='\033[1;35m'
LIGHT_CYAN='\033[1;36m'
NC='\033[0m' # No Color

BOLD='\033[1m'
NORMAL='\033[22m'
DIM='\033[2m'

awz_cli_credentials_validated=no
azure_cli_credentials_validated=no
google_cli_credentials_validated=no

clouds_enabled=${CLOUDS_ENABLED:-'^aws$'}

function common::set_working_dir() {

  working_dir=$(pwd)
  while [[ $working_dir != / ]]; do    
    if [[ -e $working_dir/.workspace ]]; then
      break
    fi
    working_dir=$(dirname $working_dir)
  done

  if [[ $working_dir == / ]]; then
    working_dir=$(pwd)
    mkdir -p $working_dir/.workspace    
  fi

  template_dir=$root_dir/cloud/recipes
  workspace_dir=$working_dir/.workspace
}

function common::check_eula() {

  if [[ ! -e $workspace_dir/eula_accepted ]]; then

    echo -e "${GREEN}\nBefore you can deploy Cloud VPN nodes you need to review"
    echo -e "and accept the AppBricks, Inc. Software End User Agreement." 
    echo -e "The terms of the agreement can be found at the following"
    echo -e "link.\n"
    echo -e "${BLUE}https://appbricks.io/legal/\n"

    printf "${GREEN}Type \"${BOLD}yes${NORMAL}\" if you agree to the terms or (q)uit: ${NC}" && read option
    [[ -n $option && $option != q && $option != Q ]] || exit 1

    [[ $option == yes ]] || exit 1
    echo -e "${GREEN}\nThank you. You can proceed to launch, run and manage you VPN nodes in the cloud now...\n${NC}"

    touch $workspace_dir/eula_accepted
  fi
}

function common::validate_environment() {

  set +e
  which aws >/dev/null 2>&1
  if [[ $? -ne 0 ]]; then
    echo -e "${RED}\nERROR! Unable to find AWS CLI in the system path.\n" 
    echo -e "${GREEN}Please follow the instructions at: "
    echo -e "- ${BLUE}https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-install.html\n" 
    echo -e "${GREEN}to download and install the AWS CLI.${NC}"
    exit 1
  fi
  which az >/dev/null 2>&1
  if [[ $? -ne 0 ]]; then
    echo -e "${RED}\nERROR! Unable to find Microsoft Azure CLI in the system path.\n" 
    echo -e "${GREEN}Please follow the instructions at: "
    echo -e "- ${BLUE}https://docs.microsoft.com/en-us/cli/azure/install-azure-cli\n" 
    echo -e "${GREEN}to download and install the Microsoft Azure CLI.${NC}"
    exit 1
  fi
  which gcloud >/dev/null 2>&1
  if [[ $? -ne 0 ]]; then
    echo -e "${RED}\nERROR! Unable to find Google Cloud CLI in the system path.\n" 
    echo -e "${GREEN}Please follow the instructions at: "
    echo -e "- ${BLUE}https://cloud.google.com/sdk/docs\n" 
    echo -e "${GREEN}to download and install the Google Cloud SDK.${NC}"
    exit 1
  fi
  which terraform >/dev/null 2>&1
  if [[ $? -ne 0 ]]; then
    echo -e "${RED}\nERROR! Unable to find Terraform CLI in the system path.\n" 
    echo -e "${GREEN}Please download the CLI from:"
    echo -e "- ${BLUE}https://www.terraform.io/downloads.html\n" 
    echo -e "${GREEN}and unzip and copy it to a system path location such as"
    echo -e "'/usr/local/bin'.${NC}"
    exit 1
  fi
  which jq >/dev/null 2>&1
  if [[ $? -ne 0 ]]; then
    echo -e "${RED}\nERROR! Unable to find JQ CLI in the system path.\n" 
    echo -e "${GREEN}Please download the CLI from:"
    echo -e "- ${BLUE}https://stedolan.github.io/jq/\n" 
    echo -e "${GREEN}rename it to 'jq' and copy it to a system path location such as"
    echo -e "'/usr/local/bin'.${NC}"
    exit 1
  fi
  set -e

  if [[ ! -e $working_dir/cloud-credentials ]]; then
    echo -e "${RED}\nERROR! Unable to find the Cloud Credentials file at \"./cloud-credentials\".${NC}" 
    exit 1
  fi
  if [[ ! -e $working_dir/deployment-vars ]]; then
    echo -e "${RED}\nERROR! Unable to find the Deployment variables file at \"./deployment-vars\".${NC}" 
    exit 1
  fi

  # Read the deployment context
  source $working_dir/cloud-credentials
  source $working_dir/deployment-vars
}

function common::validate_cloud_credentials() {

  case $1 in
    aws)
      if [[ -z $AWS_ACCESS_KEY \
        || -z $AWS_SECRET_KEY ]]; then
        echo -e "${RED}\nERROR! The environment variables \"AWS_ACCESS_KEY\" and \"AWS_SECRET_KEY\" must be set in the \"cloud-credentials\" file.${NC}" 
        exit 1
      fi
      ;;
    azure)
      if [[ -z $ARM_CLIENT_ID \
        || -z $ARM_CLIENT_SECRET \
        || -z $ARM_TENANT_ID ]]; then
        echo -e "${RED}\nERROR! The environment variables \"ARM_CLIENT_ID\", \"ARM_CLIENT_SECRET\" and \"ARM_TENANT_ID\" must be set in the \"cloud-credentials\" file.${NC}" 
        exit 1
      fi
      ;;
    google)
      if [[ -z $GOOGLE_CREDENTIALS \
        || -z $GOOGLE_PROJECT ]]; then
        echo -e "${RED}\nERROR! The environment variables \"GOOGLE_CREDENTIALS\" and \"GOOGLE_PROJECT\" must be set in the \"cloud-credentials\" file.${NC}" 
        exit 1
      fi
      ;;
  esac
}

function common::validate_workspace() {

  local command=$1
  local first

  if [[ ! -e ${template_dir}/$vpn_type ]]; then
    eval "usage::${command}"
    echo -e "${RED}\nERROR! Unknown VPN type.\n" 
    echo -e "${GREEN}Available VPN types for deployment are:\n"
    first=y
    for d in $(find ${template_dir} -maxdepth 1 -type d -print); do
      if [[ $first == n ]]; then
        echo "- \"$(basename $d)\""
      else
        first=n
      fi      
    done
    echo -e "${NC}"
    exit 1
  fi
  if [[ ! -e ${template_dir}/$vpn_type/$cloud ]]; then
    eval "usage::${command}"
    echo -e "${RED}\nERROR! Unknown cloud target for VPN of type \"$vpn_type\".\n" 
    echo -e "${GREEN}Cloud targets available for deployment are:\n"
    first=y
    for d in $(find ${template_dir}/$vpn_type -maxdepth 1 -type d -print); do 
      if [[ $first == n ]]; then
        echo "- \"$(basename $d)\""
      else
        first=n
      fi      
    done
    echo -e "${NC}"
    exit 1
  fi

  if [[ ! $cloud =~ $clouds_enabled ]]; then
    echo -e "${RED}\nERROR! Cloud target \"$cloud\" is not supported for public"
    echo -e "deployments yet. Support for that cloud will be available"
    echo -e "in a future release. If you would still like to deploy to the"
    echo -e "cloud specified please contact AppBricks support.\n${NC}" 
    exit 1
  fi

  common::validate_cloud_credentials $cloud

  template_dir=${template_dir}/${vpn_type}/${cloud}
  workspace_dir=${workspace_dir}/${vpn_type}/${cloud}
  mkdir -p $workspace_dir
}

function common::validate_value_from_list() {

  local list=$1
  local value=$2
  local error_message=$3

  set +e
  echo "$list" | grep $value >/dev/null 2>&1
  if [[ $? -ne 0 ]]; then
    echo -e "${RED}\nERROR! ${error_message}${NC}"
    exit 1
  fi
  set -e
}

function ui::print_nodes_table() {

  local vpn_nodes=("$@")

  printf "     +------------+----------+----------------------+----------------------------------------------------+--------------+----------+\n"
  printf "     | ${BOLD}%-10s${NORMAL} | ${BOLD}%-8s${NORMAL} | ${BOLD}%-20s${NORMAL} | ${BOLD}%-50s${NORMAL} | ${BOLD}%-12s${NORMAL} | ${BOLD}%-8s${NORMAL} |\n" \
    'VPN Type' 'Cloud' 'Region' 'Name' 'Status' 'Version'
  printf "+----+------------+----------+----------------------+----------------------------------------------------+--------------+----------+\n"

  for ((i=0; i<${#vpn_nodes[@]}; i++)); do
    node_detail=( $(echo "${vpn_nodes[$i]}" | sed "s/|/ /g") )
    printf "| %2d | %-10s | %-8s | %-20s | %-50s | %-12s | %-8s |\n" \
      $i \
      ${node_detail[0]} \
      ${node_detail[1]} \
      ${node_detail[2]} \
      ${node_detail[3]} \
      ${node_detail[4]} \
      ${node_detail[5]}
  done

  echo -e "+----+------------+----------+----------------------+----------------------------------------------------+--------------+----------+"  
}

scripts_dir=$(dirname $BASH_SOURCE)
source ${scripts_dir}/common_usage
source ${scripts_dir}/common_cloud
source ${scripts_dir}/common_terraform