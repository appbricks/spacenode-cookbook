#!/bin/bash

WHITE='\033[1;37m'
BLACK='\033[0;30m'
RED='\033[0;31m'
BLUE='\033[0;34m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
DARK_GRAY='\033[1;30m'
BROWN_ORANGE='\033[0;33m'
LIGHT_GRAY='\033[0;37m'
LIGHT_RED='\033[1;31m'
LIGHT_GREEN='\033[1;32m'
LIGHT_BLUE='\033[1;34m'
LIGHT_PURPLE='\033[1;35m'
LIGHT_CYAN='\033[1;36m'
NC='\033[0m' # No Color

BOLD='\033[1m'
NORMAL='\033[22m'
DIM='\033[2m'

ext_cookbook_path=${EXT_COOKBOOK_PATH:-/usr/local/lib}

awz_cli_credentials_validated=no
azure_cli_credentials_validated=no
google_cli_credentials_validated=no

clouds_enabled=${CLOUDS_ENABLED:-'^(aws|azure|google|vagrant|docker)$'}
clouds_with_regions=${CLOUDS_WITH_REGIONS:-'^(aws|azure|google)$'}
clouds_without_regions=${CLOUDS_WITHOUT_REGIONS:-'^(vagrant|docker)$'}

function common::set_working_dir() {

  working_dir=$(pwd)
  while [[ $working_dir != / ]]; do
    if [[ -e $working_dir/.workspace ]]; then
      break
    fi
    working_dir=$(dirname $working_dir)
  done

  if [[ $working_dir == / ]]; then
    working_dir=$(pwd)
    mkdir -p $working_dir/.workspace
  fi

  workspace_root=$working_dir/.workspace/run
  mkdir -p $workspace_root

  template_dir=$working_dir/.workspace/templates
  if [[ ! -e $template_dir ]]; then
    mkdir -p $template_dir
    ln -s $root_dir/cloud/recipes/* $template_dir
  fi
}

function common::check_eula() {

  if [[ ! -e $workspace_root/eula_accepted ]]; then

    echo -e "${GREEN}\nBefore you can deploy Cloud nodes you need to review and"
    echo -e "accept the AppBricks, Inc. Software End User Agreement."
    echo -e "The terms of the agreement can be found at the following"
    echo -e "link.\n"
    echo -e "${BLUE}https://appbricks.io/legal/\n"

    printf "${GREEN}Type \"${BOLD}yes${NORMAL}\" if you agree to the terms or (q)uit: ${NC}" && read option
    [[ -n $option && $option != q && $option != Q ]] || exit 1

    [[ $option == yes ]] || exit 1
    echo -e "${GREEN}\nThank you. You can proceed to launch, run and manage you nodes in the cloud now...\n${NC}"

    touch $workspace_root/eula_accepted
  fi
}

function common::validate_environment() {

  set +e
  which aws >/dev/null 2>&1
  if [[ $? -ne 0 ]]; then
    echo -e "${RED}\nERROR! Unable to find AWS CLI in the system path.\n"
    echo -e "${GREEN}Please follow the instructions at: "
    echo -e "- ${BLUE}https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-install.html\n"
    echo -e "${GREEN}to download and install the AWS CLI.${NC}"
    exit 1
  fi
  which az >/dev/null 2>&1
  if [[ $? -ne 0 ]]; then
    echo -e "${RED}\nERROR! Unable to find Microsoft Azure CLI in the system path.\n"
    echo -e "${GREEN}Please follow the instructions at: "
    echo -e "- ${BLUE}https://docs.microsoft.com/en-us/cli/azure/install-azure-cli\n"
    echo -e "${GREEN}to download and install the Microsoft Azure CLI.${NC}"
    exit 1
  fi
  which gcloud >/dev/null 2>&1
  if [[ $? -ne 0 ]]; then
    echo -e "${RED}\nERROR! Unable to find Google Cloud CLI in the system path.\n"
    echo -e "${GREEN}Please follow the instructions at: "
    echo -e "- ${BLUE}https://cloud.google.com/sdk/docs\n"
    echo -e "${GREEN}to download and install the Google Cloud SDK.${NC}"
    exit 1
  fi
  which terraform >/dev/null 2>&1
  if [[ $? -ne 0 ]]; then
    echo -e "${RED}\nERROR! Unable to find Terraform CLI in the system path.\n"
    echo -e "${GREEN}Please download the CLI from:"
    echo -e "- ${BLUE}https://www.terraform.io/downloads.html\n"
    echo -e "${GREEN}and unzip and copy it to a system path location such as"
    echo -e "'/usr/local/bin'.${NC}"
    exit 1
  fi
  which jq >/dev/null 2>&1
  if [[ $? -ne 0 ]]; then
    echo -e "${RED}\nERROR! Unable to find JQ CLI in the system path.\n"
    echo -e "${GREEN}Please download the CLI from:"
    echo -e "- ${BLUE}https://stedolan.github.io/jq/\n"
    echo -e "${GREEN}rename it to 'jq' and copy it to a system path location such as"
    echo -e "'/usr/local/bin'.${NC}"
    exit 1
  fi
  set -e

  if [[ ! -e $(pwd)/cloud-creds.sh ]]; then
    echo -e "${RED}\nERROR! Unable to find the Cloud Credentials file at \"./cloud-creds.sh\".${NC}"
    exit 1
  fi
  if [[ ! -e $(pwd)/build-vars.sh ]]; then
    echo -e "${RED}\nERROR! Unable to find the Deployment variables file at \"./build-vars.sh\".${NC}"
    exit 1
  fi

  # Read the deployment context
  source $(pwd)/cloud-creds.sh
  source $(pwd)/build-vars.sh
}

function common::validate_cloud_credentials() {

  case $1 in
    aws)
      if [[ -z $AWS_ACCESS_KEY \
        || -z $AWS_SECRET_KEY ]]; then
        echo -e "${RED}\nERROR! The environment variables \"AWS_ACCESS_KEY\" and \"AWS_SECRET_KEY\" must be set in the \"cloud-creds.sh\" file.${NC}"
        exit 1
      fi
      ;;
    azure)
      if [[ -z $ARM_CLIENT_ID \
        || -z $ARM_CLIENT_SECRET \
        || -z $ARM_TENANT_ID ]]; then
        echo -e "${RED}\nERROR! The environment variables \"ARM_CLIENT_ID\", \"ARM_CLIENT_SECRET\" and \"ARM_TENANT_ID\" must be set in the \"cloud-creds.sh\" file.${NC}"
        exit 1
      fi
      ;;
    google)
      if [[ -z $GOOGLE_CREDENTIALS \
        || -z $GOOGLE_PROJECT ]]; then
        echo -e "${RED}\nERROR! The environment variables \"GOOGLE_CREDENTIALS\" and \"GOOGLE_PROJECT\" must be set in the \"cloud-creds.sh\" file.${NC}"
        exit 1
      fi
      ;;
  esac
}

function common::check_help_requested() {

  local command=$1

  for arg in "${@:2:99}"; do
    if [[ $arg == -h || $arg == --help ]]; then
      eval "usage::${command}"
      exit 0
    fi
  done
}

function common::validate_workspace() {

  local command=$1
  local first

  input_node=""
  input_node_cloud=""

  if [[ $node_type =~ ^[a-zA-Z0-9_]+(@[a-zA-Z0-9_]+)?:[a-zA-Z0-9_]+:[a-zA-Z0-9_]+$ ]]; then
    input_node=$(echo $node_type | cut -d ':' -f1)
    cookbook_name=$(echo $node_type | cut -d ':' -f2)
    recipe_name=$(echo $node_type | cut -d ':' -f3)

    if [[ $input_node =~ ^[a-zA-Z0-9_]+@[a-zA-Z0-9_]+$ ]]; then
      input_node_cloud=$(echo $input_node | cut -d '@' -f2)
      input_node=$(echo $input_node | cut -d '@' -f1)
    else
      input_node_cloud=$cloud
    fi
    if [[ ! -d ${workspace_root}/${input_node}/${input_node_cloud}/${region} ]]; then
      echo -e "${RED}\nERROR! Invalid input node '${input_node}'.\n"
      exit 1
    fi

    template_dir=${ext_cookbook_path}/${cookbook_name}/cloud/recipes/${recipe_name}/${cloud}
    if [[ ! -d $template_dir ]]; then
      echo -e "${RED}\nERROR! Invalid recipe template path '${template_dir}'.\n"
      exit 1
    fi

  else

    if [[ ! -e ${template_dir}/$node_type ]]; then
      eval "usage::${command}"
      echo -e "${RED}\nERROR! Unknown node type.\n"
      echo -e "${GREEN}Available node types for deployment are:\n"
      first=y
      for d in $(find -L ${template_dir} -maxdepth 1 -type d -print); do
        if [[ $first == n ]]; then
          echo "- \"$(basename $d)\""
        else
          first=n
        fi
      done
      echo -e "${NC}"
      exit 1
    fi
    if [[ ! -e ${template_dir}/$node_type/$cloud ]]; then
      eval "usage::${command}"
      echo -e "${RED}\nERROR! Unknown cloud target for node of type \"$node_type\".\n"
      echo -e "${GREEN}Cloud targets available for deployment are:\n"
      first=y
      for d in $(find -L ${template_dir}/$node_type -maxdepth 1 -type d -print); do
        if [[ $first == n ]]; then
          echo "- \"$(basename $d)\""
        else
          first=n
        fi
      done
      echo -e "${NC}"
      exit 1
    fi

    if [[ ! $cloud =~ $clouds_enabled ]]; then
      echo -e "${RED}\nERROR! Cloud target \"$cloud\" is not supported for public"
      echo -e "deployments yet. Support for that cloud will be available"
      echo -e "in a future release. If you would still like to deploy to the"
      echo -e "cloud specified please contact AppBricks support.\n${NC}"
      exit 1
    fi

    template_dir=${template_dir}/${node_type}/${cloud}
  fi

  common::validate_cloud_credentials $cloud
  workspace_dir=${workspace_root}/${node_type}/${cloud}
  mkdir -p $workspace_dir

  backend=$(cat $template_dir/cloud.tf | awk '/backend ".*"/{ print $2 }' | tr -d '"')
}

function common::validate_value_from_list() {

  local list=$1
  local value=$2
  local error_message=$3

  set +e
  echo "$list" | grep $value >/dev/null 2>&1
  if [[ $? -ne 0 ]]; then
    echo -e "${RED}\nERROR! ${error_message}${NC}"
    exit 1
  fi
  set -e
}

function ui::print_nodes_table() {

  local nodes=("$@")

  printf "     +--------------------------------+----------+------------+------------------------------------------+--------------+----------+\n"
  printf "     | ${BOLD}%-30s${NORMAL} | ${BOLD}%-8s${NORMAL} | ${BOLD}%-10s${NORMAL} | ${BOLD}%-40s${NORMAL} | ${BOLD}%-12s${NORMAL} | ${BOLD}%-8s${NORMAL} |\n" \
    'Node' 'Cloud' 'Region' 'Address' 'Status' 'Version'
  printf "+----+--------------------------------+----------+------------+------------------------------------------+--------------+----------+\n"

  for ((i=0; i<${#nodes[@]}; i++)); do
    node_detail=${nodes[$i]}
    printf "| %2d | %-30s | %-8s | %-10s | %-40s | %-12s | %-8s |\n" \
      $i \
      "$(echo "$node_detail" | awk -F '|' '{ print substr($1,1,30) }')" \
      "$(echo "$node_detail" | awk -F '|' '{ print $2 }')" \
      "$(echo "$node_detail" | awk -F '|' '{ print substr($3,1,10) }')" \
      "$(echo "$node_detail" | awk -F '|' '{ print substr($4,1,40) }')" \
      "$(echo "$node_detail" | awk -F '|' '{ print $5 }')" \
      "$(echo "$node_detail" | awk -F '|' '{ print $6 }')"
  done

  echo -e "+----+--------------------------------+----------+------------+------------------------------------------+--------------+----------+"
}

scripts_dir=$(dirname $BASH_SOURCE)
source ${scripts_dir}/common-usage
source ${scripts_dir}/common-cloud
source ${scripts_dir}/common-terraform