#!/bin/bash

workspace_dir=$1 && shift
template_dir=$1 && shift
cloud=${1:-<CLOUD>} && shift

source $(dirname $BASH_SOURCE)/common
set -euo pipefail

region=""
tunnel_type=""

common::validate_workspace start_tunnel
while [[ $# -gt 0 ]]; do
  case "$1" in
    -r|--region)
      region=$2
      shift
      ;;
    -t|--type)
      tunnel_type=$2
      shift
      ;;
    -d|--debug)
      set -x
      ;;
    -h|--help)
      usage::start_tunnel
      exit 0
      ;;
    *)
      echo -e "${RED}\nERROR! Unknown option \"$1\".${NC}"
      usage::start_tunnel
      exit 1
      ;;
  esac
  shift
done

if [[ -z $region ]]; then
  usage::start_tunnel
  echo -e "${RED}\nERROR! Please provide a cloud region from the following list.${NC}"
  $(dirname $BASH_SOURCE)/show-regions $cloud
  exit 1
fi
if [[ -z $tunnel_type ]]; then
  usage::start_tunnel
  echo -e "${RED}\nERROR! Please provide a tunnel type.${NC}"
  exit 1
fi
if [[ ! -e ${workspace_dir}/${region}/output.json ]]; then
  echo -e "${RED}\nERROR! Deployment workspace path does not exist. The region"
  echo -e "       provided may be invalid or the server may not have been deployed.${NC}"
  exit 1
fi
if [[ ! -e ${workspace_dir}/${region}/client_tunnel ]]; then
  echo -e "${RED}\nERROR! The client tunnel script for the node has not been"
  echo -e "       retrieved. You can retrieve it by running the \"download-vpn-config\""
  echo -e "       command for this node.${NC}"
  exit 1
fi

if [[ $tunnel_type != udp_over_tcp \
  && $tunnel_type != udp_over_icmp \
  && $tunnel_type != udp_over_udp \
  && $tunnel_type != udp_over_udp_with_fec \
  && $tunnel_type != tcp_over_udp_with_fec ]]; then

  echo -e "${RED}\nERROR! Invalid tunnel type.${NC}"
  exit 1
fi

vpn_masking_available=$(cat $deployment_output | jq -r .vpn_masking_available.value)
if [[ $vpn_masking_available != true ]]; then
  echo -e "${RED}\nERROR! Node does not provide a VPN with a masking service.${NC}"
  exit 1
fi

deployment_output=${workspace_dir}/${region}/output.json
bastion_instance_id=$(cat $deployment_output | jq -r '.cb_managed_instances.value[0] | .id')
state=$(cloud::get_node_state "$cloud" "$region" "$bastion_instance_id")

if [[ $state == stopped ]]; then
  echo -n -e "\n${GREEN}${BOLD}Node is not running. Starting it.${NORMAL}"
  response=$(cloud::start_node "$cloud" "$region" "$bastion_instance_id")

  i=0
  while [[ $state != running && $i -lt 24 ]]; do
    sleep 5
    state=$(cloud::get_node_state "$cloud" "$region" "$bastion_instance_id")
    echo -n -e "."
    i=$((i+1))
  done
  echo -e "${NORMAL}"
fi
if [[ $state == running ]]; then
  ${workspace_dir}/${region}/client_tunnel $tunnel_type
else
  echo -e "${RED}\nERROR! Node is not running. Current state of node is \"${state}\".${NC}"
  exit 1
fi
